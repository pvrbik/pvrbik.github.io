    |\^/|     Maple 10 (IBM INTEL LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2005
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> pord:=proc(A,B):
>     if (A[1]=B[1]) then 
>         return pord(A[2..-1],B[2..-1]):
>     end if:
>     return evalb(A[1]>B[1]):
> end proc:
> 
> Maple2Smp:=proc(inF,var) local f,con,n,m;
>     f:=expand(inF):
>     con:=g->[seq(degree(g,var[i]),i=1..nops(var))]:
>     n:=[coeffs(f,var,'m')]:
>     m:=[m]:
>     return sort( [seq([n[i],con(m[i])],i=1..nops(m))], (x,y)->pord(x[2],y[2]) ):
> end proc:
> 
> SMP2Maple:=(p,var)->add(map(x->x[1]*mul(zip((a,b)->a^b,var,x[2])[i],i=1..nops(var)),p)[i],i=1..nops(p)):
> 
> SMPadd:=proc(A,B)
>     if (A=[]) then
>         return B:
>     elif (B=[]) then
>         return A:
>     elif (A[1][2]=B[1][2]) then
>         if (A[1][1]+B[1][1] <> 0) then
>             return [ [A[1][1]+B[1][1], A[1][2]], op(SMPadd(A[2..-1],B[2..-1])) ]:
>         else 
>             return SMPadd(A[2..-1],B[2..-1]) 
>         end if:
>     elif (pord(A[1][2],B[1][2])) then
>         return [ A[1], op(SMPadd(A[2..-1],B) )]:
>     else
>         return [ B[1], op(SMPadd(A,B[2..-1]) )]:
>     end if:
> end proc:
> 
> SMPneg:=proc(inA) local i,A:
>     A:=inA:
>     for i from 1 to nops(A) do
>         A[i][1]:=-A[i][1]:
>     end do:
>     return A:
> end proc:
> 
> SMPsub:=(A,B)-> SMPadd(A,SMPneg(B)):
> 
> SMPmult:=proc(A,B,var) local f,g:
>     f:=(x0 ,C)->map(x->[x0[1]*x[1],x0[2]+x[2]],C):
>     g:=zip(f,A,[seq(B,i=1..nops(A))]):
>     foldr( (x,y)->SMPadd(x,y),Maple2Smp(0,var),op(g) ) 
> end proc:
> 
> SMPzero:=proc(A)
>     if A=[] then return true: end if:
>     if A[1][1]=0 then 
>         return SMPzero(A[2..-1]) 
>     else 
>         return false 
>     end if:
> end proc:
> 
> findNeg:=A-> foldr( (x,y)->x or y, op( map(z->evalb(z<0),A) ), false ):
> 
> LT:=A->A[1][1]:
> 
> SMPdiv:=proc(inA,B,var,Q) local R,x,q, t, SMPx, temp:
>     A:=inA:
>     if (SMPzero(B)) then return "error"; end if:
> 
>     myQuo:=[]:
> 
>     while not(SMPzero(A)) do
>         if (irem(LT(A),LT(B),'q')<>0) then return false: end if:
> 
>         t:=[[q,A[1][2]-B[1][2]]]:
>     
>         if (findNeg(t[1][2])) then return false: end if:
> 
>         myQuo:=SMPadd(myQuo,t):
>                
>         A:=SMPsub(A, SMPmult(B,t,var)):
>         
>     end do:
>        
>     if (nargs>3) then Q:=myQuo end if:
>     return true:
>         
> end proc:
Warning, `A` is implicitly declared local to procedure `SMPdiv`
Warning, `myQuo` is implicitly declared local to procedure `SMPdiv`
> 
#QUESTION 5
> var:=[x,y,z]:
> a:=randpoly(var,degree=6,terms=15);
                  3       2         2             3         3       4
a := -10 x y - 7 y  - 40 y  z + 42 x  y z - 50 x y  + 23 y z  + 75 x  z

           2  2        2    2       2  3       4         5       5
     - 92 x  y  z + 6 x  y z  + 74 x  z  + 72 y  z + 37 z  - 23 x  z

           2  2  2         5
     + 87 x  y  z  + 44 y z

> b:=randpoly(var,degree=6,terms=15);
                  2        2       3  2       3               3       5
b := 77 + 95 y + x  y + y z  + 55 x  y  - 28 x  y z + 16 x y z  + 30 y

           3  2       3  3       2  4       2    3       2  4         5       6
     - 27 y  z  - 15 x  y  - 59 x  y  - 96 x  y z  + 72 x  z  - 87 x z  + 47 y

> A:=Maple2Smp(a,var);
A := [[-23, [5, 0, 1]], [75, [4, 0, 1]], [87, [2, 2, 2]], [-92, [2, 2, 1]],

    [6, [2, 1, 2]], [42, [2, 1, 1]], [74, [2, 0, 3]], [-50, [1, 3, 0]],

    [-10, [1, 1, 0]], [72, [0, 4, 1]], [-7, [0, 3, 0]], [-40, [0, 2, 1]],

    [44, [0, 1, 5]], [23, [0, 1, 3]], [37, [0, 0, 5]]]

> B:=Maple2Smp(b,var);
B := [[-15, [3, 3, 0]], [55, [3, 2, 0]], [-28, [3, 1, 1]], [-59, [2, 4, 0]],

    [-96, [2, 1, 3]], [1, [2, 1, 0]], [72, [2, 0, 4]], [16, [1, 1, 3]],

    [-87, [1, 0, 5]], [47, [0, 6, 0]], [30, [0, 5, 0]], [-27, [0, 3, 2]],

    [1, [0, 1, 2]], [95, [0, 1, 0]], [77, [0, 0, 0]]]

> C:=SMPadd(A,B,var);
C := [[-23, [5, 0, 1]], [75, [4, 0, 1]], [-15, [3, 3, 0]], [55, [3, 2, 0]],

    [-28, [3, 1, 1]], [-59, [2, 4, 0]], [87, [2, 2, 2]], [-92, [2, 2, 1]],

    [-96, [2, 1, 3]], [6, [2, 1, 2]], [42, [2, 1, 1]], [1, [2, 1, 0]],

    [72, [2, 0, 4]], [74, [2, 0, 3]], [-50, [1, 3, 0]], [16, [1, 1, 3]],

    [-10, [1, 1, 0]], [-87, [1, 0, 5]], [47, [0, 6, 0]], [30, [0, 5, 0]],

    [72, [0, 4, 1]], [-27, [0, 3, 2]], [-7, [0, 3, 0]], [-40, [0, 2, 1]],

    [44, [0, 1, 5]], [23, [0, 1, 3]], [1, [0, 1, 2]], [95, [0, 1, 0]],

    [37, [0, 0, 5]], [77, [0, 0, 0]]]

> expand(a+b-SMP2Maple(C,var));
                                       0

> C:=SMPmult(A,B,var);
bytes used=4001440, alloc=3669344, time=0.12
C := [[345, [8, 3, 1]], [-1265, [8, 2, 1]], [644, [8, 1, 2]], [1357, [7, 4, 1]],

    [-1125, [7, 3, 1]], [4125, [7, 2, 1]], [2208, [7, 1, 4]],

    [-2100, [7, 1, 2]], [-23, [7, 1, 1]], [-1656, [7, 0, 5]],

    [-4425, [6, 4, 1]], [-7568, [6, 1, 4]], [75, [6, 1, 1]], [2001, [6, 0, 6]],

    [5400, [6, 0, 5]], [-1081, [5, 6, 1]], [-1305, [5, 5, 2]], [690, [5, 5, 1]],

    [4695, [5, 4, 2]], [-5690, [5, 4, 1]], [-2925, [5, 3, 3]],

    [2906, [5, 3, 2]], [2310, [5, 3, 1]], [3902, [5, 2, 3]], [-1176, [5, 2, 2]],

    [-872, [5, 1, 4]], [-23, [5, 1, 3]], [-2185, [5, 1, 1]], [-6525, [5, 0, 6]],

    [-1771, [5, 0, 1]], [-5133, [4, 6, 2]], [8953, [4, 6, 1]], [750, [4, 6, 0]],

    [-354, [4, 5, 2]], [-228, [4, 5, 1]], [-2750, [4, 5, 0]],

    [-4366, [4, 4, 3]], [1400, [4, 4, 1]], [150, [4, 4, 0]], [-8352, [4, 3, 5]],

    [8832, [4, 3, 4]], [-2025, [4, 3, 3]], [87, [4, 3, 2]], [-92, [4, 3, 1]],

    [-550, [4, 3, 0]], [6264, [4, 2, 6]], [-7200, [4, 2, 5]],

    [-4032, [4, 2, 4]], [6, [4, 2, 2]], [322, [4, 2, 1]], [-6672, [4, 1, 6]],

    [3024, [4, 1, 5]], [149, [4, 1, 3]], [7125, [4, 1, 1]], [5328, [4, 0, 7]],

    [5775, [4, 0, 1]], [-1080, [3, 7, 1]], [2950, [3, 7, 0]], [3960, [3, 6, 1]],

    [105, [3, 6, 0]], [-2016, [3, 5, 2]], [600, [3, 5, 1]], [205, [3, 5, 0]],

    [-660, [3, 4, 5]], [4455, [3, 4, 3]], [-2004, [3, 4, 1]], [-50, [3, 4, 0]],

    [3257, [3, 3, 5]], [-5072, [3, 3, 4]], [1265, [3, 3, 3]], [1120, [3, 3, 2]],

    [-7569, [3, 2, 7]], [6772, [3, 2, 6]], [2131, [3, 2, 5]], [28, [3, 2, 4]],

    [960, [3, 2, 3]], [-10, [3, 2, 0]], [-522, [3, 1, 7]], [-3506, [3, 1, 6]],

    [-720, [3, 1, 4]], [-6438, [3, 0, 8]], [4089, [2, 8, 2]],

    [-8572, [2, 8, 1]], [2892, [2, 7, 2]], [-786, [2, 7, 1]], [413, [2, 7, 0]],

    [3478, [2, 6, 3]], [180, [2, 6, 2]], [3620, [2, 6, 1]], [-2596, [2, 5, 5]],

    [-9261, [2, 5, 4]], [3347, [2, 5, 3]], [72, [2, 5, 1]], [3001, [2, 4, 5]],

    [-162, [2, 4, 4]], [-1262, [2, 4, 3]], [-7, [2, 4, 0]], [2352, [2, 3, 5]],

    [3423, [2, 3, 4]], [-92, [2, 3, 3]], [8265, [2, 3, 2]], [-8780, [2, 3, 1]],

    [-4224, [2, 2, 8]], [-2208, [2, 2, 6]], [-2836, [2, 2, 5]], [6, [2, 2, 4]],

    [-95, [2, 2, 3]], [7269, [2, 2, 2]], [-3094, [2, 2, 1]], [3168, [2, 1, 9]],

    [-3552, [2, 1, 8]], [1656, [2, 1, 7]], [981, [2, 1, 5]], [7030, [2, 1, 3]],

    [462, [2, 1, 2]], [3234, [2, 1, 1]], [2664, [2, 0, 9]], [5698, [2, 0, 3]],

    [-2350, [1, 9, 0]], [-1500, [1, 8, 0]], [-470, [1, 7, 0]],

    [1350, [1, 6, 2]], [-300, [1, 6, 0]], [1152, [1, 5, 4]], [-6264, [1, 4, 6]],

    [-112, [1, 4, 3]], [220, [1, 4, 2]], [-4750, [1, 4, 0]], [609, [1, 3, 5]],

    [-640, [1, 3, 4]], [-3850, [1, 3, 0]], [704, [1, 2, 8]], [3848, [1, 2, 6]],

    [-10, [1, 2, 2]], [-950, [1, 2, 0]], [-3828, [1, 1, 10]],

    [-1409, [1, 1, 8]], [-770, [1, 1, 0]], [-3219, [1, 0, 10]],

    [3384, [0, 10, 1]], [2160, [0, 9, 1]], [-329, [0, 9, 0]],

    [-1880, [0, 8, 1]], [-210, [0, 8, 0]], [2068, [0, 7, 5]], [-863, [0, 7, 3]],

    [-1200, [0, 7, 1]], [3059, [0, 6, 5]], [690, [0, 6, 3]], [189, [0, 6, 2]],

    [1110, [0, 5, 5]], [1152, [0, 5, 3]], [6840, [0, 5, 1]], [-1188, [0, 4, 7]],

    [-621, [0, 4, 5]], [-7, [0, 4, 2]], [5544, [0, 4, 1]], [-665, [0, 4, 0]],

    [-999, [0, 3, 7]], [-40, [0, 3, 3]], [-3800, [0, 3, 1]], [-539, [0, 3, 0]],

    [44, [0, 2, 7]], [4203, [0, 2, 5]], [2185, [0, 2, 3]], [-3080, [0, 2, 1]],

    [37, [0, 1, 7]], [6903, [0, 1, 5]], [1771, [0, 1, 3]], [2849, [0, 0, 5]],

    [0, [0, 0, 0]]]

> expand(a*b-SMP2Maple(C,var));
                                       0

> 
#QUESTION 6
> SMPdiv(A,B,var,'Q'); 
                                     false

> SMPdiv(B,A,var,'Q'); 
                                     false

> SMPdiv(C,A,var,'Q'); SMP2Maple(Q,var);
                                      true

bytes used=104014124, alloc=4390108, time=3.19
             2        2       3  2       3               3       5       3  2
77 + 95 y + x  y + y z  + 55 x  y  - 28 x  y z + 16 x y z  + 30 y  - 27 y  z

           3  3       2  4       2    3       2  4         5       6
     - 15 x  y  - 59 x  y  - 96 x  y z  + 72 x  z  - 87 x z  + 47 y

> SMPdiv(C,B,var,'Q'); SMP2Maple(Q,var);
                                      true

             3       2         2             3         3       4         2  2
-10 x y - 7 y  - 40 y  z + 42 x  y z - 50 x y  + 23 y z  + 75 x  z - 92 x  y  z

          2    2       2  3       4         5       5         2  2  2         5
     + 6 x  y z  + 74 x  z  + 72 y  z + 37 z  - 23 x  z + 87 x  y  z  + 44 y z

> 
> quit();
bytes used=107146880, alloc=4390108, time=3.28
